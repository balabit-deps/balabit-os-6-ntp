

    TOPntp-stable1.3722.8.1 changes

NTP - Network Time Protocol
#### ChangeSet ####

2017-02-12 13:46:35+01:00, perlinger@ntp.org
  [Sec 3388] NTP-01-014: Buffer Overflow in DPTS Clock

#==== ChangeLog ====
#
#2017-02-12 13:46:35+01:00, perlinger@ntp.org +4 -0
#  [Sec 3388] NTP-01-014: Buffer Overflow in DPTS Clock
#--- 1.1853.2.5/ChangeLog	2017-02-01 13:07:08 +00:00
#+++ 1.1853.8.1/ChangeLog	2017-02-12 12:46:35 +00:00
#@@ -1,3 +1,7 @@
#+---
#+* [Sec 3388] NTP-01-014: Buffer Overflow in DPTS Clock
#+  (Pentest report 01.2017) <perlinger@ntp.org>
#+
# ---
# (4.2.8p9-win) 2017/02/01 Released by Harlan Stenn <stenn@ntp.org>
# 
#
#==== ntpd/refclock_datum.c ====
#
#2017-02-12 13:46:35+01:00, perlinger@ntp.org +10 -9
#  [Sec 3388] NTP-01-014: Buffer Overflow in DPTS Clock
--- 1.22/ntpd/refclock_datum.c	2013-07-06 05:36:11 +00:00
+++ 1.23/ntpd/refclock_datum.c	2017-02-12 12:46:35 +00:00
@@ -485,7 +485,7 @@ datum_pts_receive(
 	struct recvbuf *rbufp
 	)
 {
-	int i;
+	int i, nb;
 	l_fp tstmp;
 	struct peer *p;
 	struct datum_pts_unit *datum_pts;
@@ -526,22 +526,23 @@ datum_pts_receive(
 	** received to reduce the jitter.
 	*/
 
-	if (datum_pts->nbytes == 0) {
+	nb = datum_pts->nbytes;
+	if (nb == 0) {
 		datum_pts->lastrec = rbufp->recv_time;
 	}
 
 	/*
 	** Increment our count to the number of bytes received so far. Return if we
 	** haven't gotten all seven bytes yet.
+	** [Sec 3388] make sure we do not overrun the buffer.
+	** TODO: what to do with excessive bytes, if we ever get them?
 	*/
-
-	for (i=0; i<dpend; i++) {
-		datum_pts->retbuf[datum_pts->nbytes+i] = dpt[i];
+	for (i=0; (i < dpend) && (nb < sizeof(datum_pts->retbuf)); i++, nb++) {
+		datum_pts->retbuf[nb] = dpt[i];
 	}
-
-	datum_pts->nbytes += dpend;
-
-	if (datum_pts->nbytes != 7) {
+	datum_pts->nbytes = nb;
+	
+	if (nb < 7) {
 		return;
 	}
 


