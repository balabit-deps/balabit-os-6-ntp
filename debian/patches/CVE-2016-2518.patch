Description: fix denial of service via crafted addpeer
Origin: upstream, http://bk1.ntp.org/ntp-stable/?PAGE=patch&REV=56c9c5218oFfAM2Htz-Zz0kGVqWFow
Bug: http://support.ntp.org/bin/view/Main/NtpBug3009

Index: ntp-4.2.8p4+dfsg/ntpd/ntp_request.c
===================================================================
--- ntp-4.2.8p4+dfsg.orig/ntpd/ntp_request.c	2016-05-31 13:57:57.341598017 -0400
+++ ntp-4.2.8p4+dfsg/ntpd/ntp_request.c	2016-05-31 13:59:46.214981523 -0400
@@ -1357,11 +1357,38 @@
 		peeraddr.sa.sa_len = SOCKLEN(&peeraddr);
 #endif
 
-		/* XXX W2DO? minpoll/maxpoll arguments ??? */
+		/* check mode value: 0 <= hmode <= 6
+		 *
+		 * There's no good global define for that limit, and
+		 * using a magic define is as good (or bad, actually) as
+		 * a magic number. So we use the highest possible peer
+		 * mode, and that is MODE_BCLIENT.
+		 *
+		 * [Bug 3009] claims that a problem occurs for hmode > 7,
+		 * but the code in ntp_peer.c indicates trouble for any
+		 * hmode > 6 ( --> MODE_BCLIENT).
+		 */
+		if (temp_cp.hmode > MODE_BCLIENT) {
+			req_ack(srcadr, inter, inpkt, INFO_ERR_FMT);
+			return;
+		}
+		
+		/* Any more checks on the values? Unchecked at this
+		 * point:
+		 *   - version
+		 *   - ttl
+		 *   - keyid
+		 *
+		 *   - minpoll/maxpoll, but they are treated properly
+		 *     for all cases internally. Checking not necessary.
+		 */
+		
+		/* finally create the peer */
 		if (peer_config(&peeraddr, NULL, NULL,
 		    temp_cp.hmode, temp_cp.version, temp_cp.minpoll, 
 		    temp_cp.maxpoll, fl, temp_cp.ttl, temp_cp.keyid,
-		    NULL) == 0) {
+		    NULL) == 0)
+		{
 			req_ack(srcadr, inter, inpkt, INFO_ERR_NODATA);
 			return;
 		}
