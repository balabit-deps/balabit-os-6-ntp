

    TOPntp-stable1.3722.5.1 changes

NTP - Network Time Protocol
#### ChangeSet ####

2017-02-12 09:49:29+01:00, perlinger@ntp.org
  [Sec 3389] NTP-01-016: Denial of Service via Malformed Config

==== ChangeLog ====

2017-02-12 09:49:29+01:00, perlinger@ntp.org +4 -0
  [Sec 3389] NTP-01-016: Denial of Service via Malformed Config
#--- 1.1853.2.5/ChangeLog	2017-02-01 13:07:08 +00:00
#+++ 1.1853.5.1/ChangeLog	2017-02-12 08:49:29 +00:00
#@@ -1,3 +1,7 @@
#+---
#+* [Sec 3389] NTP-01-016: Denial of Service via Malformed Config
#+  (Pentest report 01.2017) <perlinger@ntp.org>
#+
 ---
 (4.2.8p9-win) 2017/02/01 Released by Harlan Stenn <stenn@ntp.org>
 

==== ntpd/ntp_config.c ====

2017-02-12 09:49:29+01:00, perlinger@ntp.org +23 -2
  [Sec 3389] NTP-01-016: Denial of Service via Malformed Config
   - allow 'ttl' only for network peers and 'mode' only for refclocks
Index: ntp-4.2.8p4+dfsg/ntpd/ntp_config.c
===================================================================
--- ntp-4.2.8p4+dfsg.orig/ntpd/ntp_config.c	2017-06-28 11:43:54.649740725 -0400
+++ ntp-4.2.8p4+dfsg/ntpd/ntp_config.c	2017-06-28 11:43:54.645740676 -0400
@@ -353,6 +353,9 @@ static char * normal_dtoa(double);
 static u_int32 get_pfxmatch(const char **, struct masks *);
 static u_int32 get_match(const char *, struct masks *);
 static u_int32 get_logmask(const char *);
+static int/*BOOL*/ is_refclk_addr(const address_node * addr);
+
+
 #ifndef SIM
 static int getnetnum(const char *num, sockaddr_u *addr, int complain,
 		     enum gnn_type a_type);
@@ -1258,7 +1261,10 @@ create_peer_node(
 			break;
 
 		case T_Ttl:
-			if (option->value.u >= MAX_TTL) {
+			if (is_refclk_addr(addr)) {
+				msyslog(LOG_ERR, "'ttl' does not apply for refclocks");
+				errflag = 1;
+			} else if (option->value.u >= MAX_TTL) {
 				msyslog(LOG_ERR, "ttl: invalid argument");
 				errflag = 1;
 			} else {
@@ -1267,7 +1273,12 @@ create_peer_node(
 			break;
 
 		case T_Mode:
-			my_node->ttl = option->value.u;
+			if (is_refclk_addr(addr)) {
+				my_node->ttl = option->value.u;
+			} else {
+				msyslog(LOG_ERR, "'mode' does not apply for network peers");
+				errflag = 1;
+			}
 			break;
 
 		case T_Key:
@@ -4599,6 +4610,16 @@ save_and_apply_config_tree(int/*BOOL*/ i
 #endif
 }
 
+/* Hack to disambiguate 'server' statements for refclocks and network peers.
+ * Please note the qualification 'hack'. It's just that.
+ */
+static int/*BOOL*/
+is_refclk_addr(
+	const address_node * addr
+	)
+{
+	return addr && addr->address && !strncmp(addr->address, "127.127.", 6);
+}
 
 static void
 ntpd_set_tod_using(
Index: ntp-4.2.8p4+dfsg/ntpd/ntp_proto.c
===================================================================
--- ntp-4.2.8p4+dfsg.orig/ntpd/ntp_proto.c	2017-06-28 11:43:54.649740725 -0400
+++ ntp-4.2.8p4+dfsg/ntpd/ntp_proto.c	2017-06-28 11:43:54.645740676 -0400
@@ -3277,8 +3277,9 @@ peer_xmit(
 			}
 		}
 		peer->t21_bytes = sendlen;
-		sendpkt(&peer->srcadr, peer->dstadr, sys_ttl[peer->ttl],
-		    &xpkt, sendlen);
+		sendpkt(&peer->srcadr, peer->dstadr,
+			sys_ttl[(peer->ttl >= sys_ttlmax) ? sys_ttlmax : peer->ttl],
+			&xpkt, sendlen);
 		peer->sent++;
 		peer->throttle += (1 << peer->minpoll) - 2;
 
@@ -3590,8 +3591,9 @@ peer_xmit(
 		exit (-1);
 	}
 	peer->t21_bytes = sendlen;
-	sendpkt(&peer->srcadr, peer->dstadr, sys_ttl[peer->ttl], &xpkt,
-	    sendlen);
+	sendpkt(&peer->srcadr, peer->dstadr,
+		sys_ttl[(peer->ttl >= sys_ttlmax) ? sys_ttlmax : peer->ttl],
+		&xpkt, sendlen);
 	peer->sent++;
 	peer->throttle += (1 << peer->minpoll) - 2;
 
@@ -3911,8 +3913,9 @@ pool_xmit(
 	get_systime(&xmt_tx);
 	pool->aorg = xmt_tx;
 	HTONL_FP(&xmt_tx, &xpkt.xmt);
-	sendpkt(rmtadr, lcladr,	sys_ttl[pool->ttl], &xpkt,
-		LEN_PKT_NOMAC);
+	sendpkt(rmtadr, lcladr,
+		sys_ttl[(pool->ttl >= sys_ttlmax) ? sys_ttlmax : pool->ttl],
+		&xpkt, LEN_PKT_NOMAC);
 	pool->sent++;
 	pool->throttle += (1 << pool->minpoll) - 2;
 #ifdef DEBUG
@@ -4281,10 +4284,9 @@ init_proto(void)
 	sys_stattime = current_time;
 	orphwait = current_time + sys_orphwait;
 	proto_clr_stats();
-	for (i = 0; i < MAX_TTL; i++) {
+	for (i = 0; i < MAX_TTL; ++i)
 		sys_ttl[i] = (u_char)((i * 256) / MAX_TTL);
-		sys_ttlmax = i;
-	}
+	sys_ttlmax = (MAX_TTL - 1);
 	hardpps_enable = 0;
 	stats_control = 1;
 }
