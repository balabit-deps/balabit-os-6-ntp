

    TOPntp-stable1.3722.6.1 changes

NTP - Network Time Protocol
#### ChangeSet ####

2017-02-12 11:08:16+01:00, perlinger@ntp.org
  [Sec 3387] NTP-01-012: Authenticated DoS via Malicious Config Option

==== ChangeLog ====

2017-02-12 11:08:15+01:00, perlinger@ntp.org +4 -0
  [Sec 3387] NTP-01-012: Authenticated DoS via Malicious Config Option
#--- 1.1853.2.5/ChangeLog	2017-02-01 13:07:08 +00:00
#+++ 1.1853.6.1/ChangeLog	2017-02-12 10:08:15 +00:00
#@@ -1,3 +1,7 @@
#+---
#+ * [Sec 3387] NTP-01-012: Authenticated DoS via Malicious Config Option
#+   (Pentest report 01.2017) <perlinger@ntp.org>
#+
 ---
 (4.2.8p9-win) 2017/02/01 Released by Harlan Stenn <stenn@ntp.org>
 

==== ntpd/ntp_config.c ====

2017-02-12 11:08:16+01:00, perlinger@ntp.org +12 -15
  [Sec 3387] NTP-01-012: Authenticated DoS via Malicious Config Option
Index: ntp-4.2.8p4+dfsg/ntpd/ntp_config.c
===================================================================
--- ntp-4.2.8p4+dfsg.orig/ntpd/ntp_config.c	2017-06-28 10:22:49.516398358 -0400
+++ ntp-4.2.8p4+dfsg/ntpd/ntp_config.c	2017-06-28 10:22:49.512398308 -0400
@@ -1320,8 +1320,8 @@ create_unpeer_node(
 	)
 {
 	unpeer_node *	my_node;
-	u_int		u;
-	char *		pch;
+	u_long		u;
+	const u_char *	pch;
 
 	my_node = emalloc_zero(sizeof(*my_node));
 
@@ -1330,16 +1330,15 @@ create_unpeer_node(
 	 * its generic T_String definition of a name/address "address".
 	 * We treat all valid 16-bit numbers as association IDs.
 	 */
-	pch = addr->address;
-	while (*pch && isdigit((unsigned char)*pch))
-		pch++;
-
-	if (!*pch
-	    && 1 == sscanf(addr->address, "%u", &u)
-	    && u <= ASSOCID_MAX) {
+	for (u = 0, pch = (u_char*)addr->address; isdigit(*pch); ++pch) {
+		/* accumulate with overflow retention */
+		u = (10 * u + *pch - '0') | (u & 0xFF000000u);
+	}
+	
+	if (!*pch && u <= ASSOCID_MAX) {
 		my_node->assocID = (associd_t)u;
-		destroy_address_node(addr);
 		my_node->addr = NULL;
+		destroy_address_node(addr);
 	} else {
 		my_node->assocID = 0;
 		my_node->addr = addr;
@@ -4006,10 +4005,10 @@ config_unpeers(
 	curr_unpeer = HEAD_PFIFO(ptree->unpeers);
 	for (; curr_unpeer != NULL; curr_unpeer = curr_unpeer->link) {
 		/*
-		 * Either AssocID will be zero, and we unpeer by name/
-		 * address addr, or it is nonzero and addr NULL.
+		 * If we have no address attached, assume we have to
+		 * unpeer by AssocID.
 		 */
-		if (curr_unpeer->assocID) {
+		if (!curr_unpeer->addr) {
 			p = findpeerbyassoc(curr_unpeer->assocID);
 			if (p != NULL) {
 				msyslog(LOG_NOTICE, "unpeered %s",
@@ -4017,7 +4016,6 @@ config_unpeers(
 				peer_clear(p, "GONE");
 				unpeer(p);
 			}
-
 			continue;
 		}
 
@@ -4036,7 +4034,6 @@ config_unpeers(
 				peer_clear(p, "GONE");
 				unpeer(p);
 			}
-
 			continue;
 		}
 		/*
